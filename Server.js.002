const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();

// Middleware
app.use(bodyParser.json());

// Connessione a MongoDB Atlas
mongoose.connect('mongodb+srv://corradosinigoi:h2H3ZwUxDCKe98Yf@cluster0.6yvqs.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0');

// Schema Utente
const userSchema = new mongoose.Schema({
    username: String,
    password: String
});

const User = mongoose.model('User', userSchema);

// Schema Messaggio
const messageSchema = new mongoose.Schema({
    sender: String,
    receiver: String,
    message: String,
    timestamp: { type: Date, default: Date.now }
});

const Message = mongoose.model('Message', messageSchema);

// Rotta di Prova per la Radice
app.get('/', (req, res) => {
    res.send('Benvenuto al server di messaggistica!');
});

// API di Registrazione
app.post('/register', async (req, res) => {
    const { username, password } = req.body;
    try {
        const newUser = new User({ username, password });
        await newUser.save();
        res.status(201).send('Utente registrato con successo');
    } catch (error) {
        res.status(400).send('Errore nella registrazione');
    }
});

// API di Login
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    try {
        const user = await User.findOne({ username, password });
        if (!user) {
            return res.status(400).send('Username o password non corretti');
        }
        res.status(200).send('Login effettuato con successo');
    } catch (error) {
        res.status(500).send('Errore nel login');
    }
});

// API per l'Invio dei Messaggi
app.post('/sendMessage', async (req, res) => {
    const { sender, receiver, message } = req.body;
    try {
        const newMessage = new Message({ sender, receiver, message });
        await newMessage.save();
        res.status(201).send('Messaggio inviato con successo');
    } catch (error) {
        res.status(400).send('Errore nell\'invio del messaggio');
    }
});

// API per la Ricezione dei Messaggi
app.get('/messages/:username', async (req, res) => {
    const { username } = req.params;
    try {
        const messages = await Message.find({ receiver: username });
        res.status(200).json(messages);
    } catch (error) {
        res.status(500).send('Errore nel recupero dei messaggi');
    }
});

// Avvio del Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server in esecuzione sulla porta ${PORT}`);
});
